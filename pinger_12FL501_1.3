/*
 June 2020. Pinger 3 - Ultrasonic and using DS3231 time source.
 * Unauthorised use prohibited. This gives about a 3mS duration pulse (Loop counter at 100)
 * July 2020. Now working with a 12FL501
 * Uses 1 Hz output from DS3231 to interrupt pin RA2
 * Output to ultrasonic transducer on RA0,RA1
 * LED on RA4
 * +3.3v pin to + on DS3231. (DS3231 uses 3.3 volts input.)
 * Interrupt input from DS3231 has 4.7k ohm pull-up resistor connected to + 5 volts. 
 * July 2020. Current draw about 0.4 to 1.4 mA with DS3231 on 5v without voltage divider resistors.
 * July 2020. Current draw about 4.4 to 5 mA with DS3231 on 3.3v with voltage divider resistors of 1.4k ohmm total
 * Current draw 0.5 to 0.7mA with 3.3v tapped off 3 x 4.7 k ohm resistors.
 * Farnell formula: mAh รท mA * 0.7 = estimated hours
 * CR2032 capacity is 225mAh which gives 32 hours at 5mA
 * Jul 2020. Using 12FL501 low voltage PIC at 3v. Built in Weak Pull Ups don't seem to work with interrupt.
 * So LED used instead.
 * Current is about 0.1 to 0.4mA. Battery life about 7 days. Final cell voltage about 2.8v
 * 15k ohm pull-up on RA2 interrupt works OK but now got weak pull-ups working.
 */

// PIC12LF1501 Configuration Bit Settings

// 'C' source line configuration statements

// CONFIG1
#pragma config FOSC = INTOSC    // Oscillator Selection Bits (INTOSC oscillator: I/O function on CLKIN pin)
#pragma config WDTE = OFF       // Watchdog Timer Enable (WDT disabled)
#pragma config PWRTE = OFF      // Power-up Timer Enable (PWRT disabled)
#pragma config MCLRE = OFF      // MCLR Pin Function Select (MCLR/VPP pin function is digital input)
#pragma config CP = OFF         // Flash Program Memory Code Protection (Program memory code protection is disabled)
#pragma config BOREN = OFF      // Brown-out Reset Enable (Brown-out Reset disabled)
#pragma config CLKOUTEN = OFF   // Clock Out Enable (CLKOUT function is disabled. I/O or oscillator function on the CLKOUT pin)

// CONFIG2
#pragma config WRT = OFF        // Flash Memory Self-Write Protection (Write protection off)
#pragma config STVREN = OFF     // Stack Overflow/Underflow Reset Enable (Stack Overflow or Underflow will not cause a Reset)
#pragma config BORV = LO        // Brown-out Reset Voltage Selection (Brown-out Reset Voltage (Vbor), low trip point selected.)
#pragma config LPBOR = OFF      // Low-Power Brown Out Reset (Low-Power BOR is disabled)
#pragma config LVP = OFF        // Low-Voltage Programming Enable (High-voltage on MCLR/VPP must be used for programming)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.

#include <xc.h>

#define _XTAL_FREQ 8000000

int Countery =1;

//Interrupt routine using input on RA2
void __interrupt () timer_module  (void)
{
if(INTCONbits.INTE && INTCONbits.INTF) {
Countery = 1;
INTCONbits.INTF =0; // Clear interrupt
}
}

int main(void)
{
OSCCON = 0b01110101;  //Internal Osc set to 8Mhz, Stable and also used as internal clock
CM1CON1 = 0b000000;    //all pins to digital mode
ANSELA  =0b000000;   //all pins to digital mode
TRISA = 0b000100;    // configure RA0,RA1 as an output.RA2 as input. 
OPTION_REG =0b1100000; //Weak Pull-ups and Interrupt on Leading Edge enabled
WPUA,WPUA2;     // set weak pull-up on RA2. Next formats also all work.
//WPUA = 0b000100;      // set weak pull-up on RA2.
//WPUAbits.WPUA2 = 1;  // set weak pull-up on RA2. 
//WPUA = 0x04;

while(1) // Go into infinite loop
{ 
// Ultrasonic pulse   
    if( (Countery >= 1)&&(Countery < 250)) // Should be 50. 250  gives about 7mS pulse
{
 
LATA = 0b000001; // Ultrasonic pulse
LATA= 0b000010;  // Ultrasonic pulse
LATAbits.LATA4 = 1; //Put LED on.
//LATA = !LATA; // Toggle LED
Countery = (++Countery);    //Increment Counter
}
  
else {
LATA = 0b000000; 
//LATA = !LATA; // Toggle LED
SLEEP();

}    

INTCONbits,INTE = 1;       // Enable interrupt on GP2 - needed also to wake from sleep.
ei();                      // Enable all interrupts    

}   
}
